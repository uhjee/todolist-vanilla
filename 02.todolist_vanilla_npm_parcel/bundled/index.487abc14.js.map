{"mappings":"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","sources":["./src/js/components/datas.js","./src/js/components/components.js","./src/js/components/handlers.js","./src/js/components/utils.js","./src/js/main.js"],"sourcesContent":["// TODO@heojeehaeng - data & UI 를 분리하자.....\n// ! Datas\n// IIFE, Closure - 비공개 변수를 만들어 접근 못하도록\nexport default (() => {\n  let todoList = [\n    // example: 아래 같은 형식으로 list\n    {\n      color: 'orange',\n      text: '컨텍스트 내용',\n    },\n  ];\n  let todoText = '';\n  let selectedMarkColor = 'green'; // default\n\n  // todoText Setter, Getter\n  const setTodoText = (text) => {\n    todoText = text;\n  };\n  const getTodoText = () => todoText;\n\n  // selectedMarkColor Setter, Getter\n  const setSelectedMarkColor = (color) => {\n    if (!color) return;\n    selectedMarkColor = color;\n  };\n  const getSelectedMarkColor = () => selectedMarkColor;\n\n  // Exposed functions  => Closure\n  return {\n    setSelectedMarkColor: (color) => {\n      setSelectedMarkColor(color);\n    },\n    getSelectedMarkColor: () => getSelectedMarkColor(),\n    setTodoText: (text) => {\n      setTodoText(text);\n    },\n    getTodoText: () => getTodoText(),\n  };\n})();\n","import _datas from './datas.js';\n\n/**\n *  TODO@heojeehaeng : class로 변경, factory pattern?으로 변경\n * ! Components fragmentDocument와  innerHtml 를 이용해 컴포넌트를 만드는 함수를 반환한다.\n * @return  {[type]}  make[componentName] 네이밍을 가진 컴포넌트 만드는 함수를\n */\n// IIFE, Closure - 비공개 변수를 만들어 접근 못하도록\nexport default (() => {\n  /**\n   * todo-item component 를 반환한다.\n   *\n   * @param   {[type]}  text       todo 텍스트 콘텐츠\n   * @param   {[type]}  markColor  green, lightGreen, grey, *orange(default)\n   * @author  uhjee\n   * @return  {[type]}             todo-item component\n   */\n  const makeTodoItem = (text) => {\n    const docFrag = document.createDocumentFragment();\n    // 그릇, 매개체 역할만 하는 빈 div element\n    const divEl = document.createElement('div');\n\n    docFrag.appendChild(divEl);\n    docFrag.querySelector('div').innerHTML = `\n      <li class=\"todo--body__item\">\n          <div class=\"mark mark--${_datas.getSelectedMarkColor()}\"></div>\n          <div class=\"content\">${text}</div>\n      </li>`;\n    // why cloneNode? Fragment element는 append 되면 메모리에서 사라짐.\n    return docFrag.cloneNode(true).querySelector('div').firstElementChild;\n  };\n\n  /**\n   * btn-box component (edit, delete btn) 를 반환한다.\n   * @author  uhjee\n   * @return  {[type]}  btn-box component (edit, delete btn)\n   */\n  const makeBtnBoxForTodoItem = () => {\n    const docFrag = document.createDocumentFragment();\n    const divEl = document.createElement('div');\n    docFrag.appendChild(divEl);\n    docFrag.querySelector('div').innerHTML = `\n      <div class=\"btn-box\">\n        <a href=\"javascript:void(0)\" class=\"circle-btn circle-btn--edit\" data-action=\"edit\">\n          <div class=\"material-icons\">edit</div>\n        </a>\n        <a href=\"javascript:void(0)\" class=\"circle-btn circle-btn--delete\" data-action=\"delete\">\n          <div class=\"material-icons\">delete_forever</div>\n        </a>\n      </div>`;\n\n    return docFrag.cloneNode(true).querySelector('div').firstElementChild;\n  };\n\n  /**\n   * mark component를 반환한다.\n   *\n   * @author  uhjee\n   * @param   {[type]}  color  mark의 색\n   *\n   * @return  {[type]}         mark compoenent\n   */\n  const makeMark = () => `\n    <div class=\"mark mark--${_datas.getSelectedMarkColor()}\"></div>\n    `;\n\n  /**\n   * 수정 중인 todoItem component 를 반환한다.\n   *\n   * @param   {[type]}  content    [content 수전 전의 item text]\n   * @param   {[type]}  markColor  [markColor 수정 전의 mark color]\n   *\n   * @return  {[type]}             [return editingTodoItem]\n   */\n  const makeEditingTodoItem = (content, markColor) => {\n    const docFrag = document.createDocumentFragment();\n    const divEl = document.createElement('div');\n    docFrag.appendChild(divEl);\n    docFrag.querySelector('div').innerHTML = `\n      <li class=\"todo--body__item editing\">\n        <div class=\"mark mark--${markColor}\"></div>\n        <input class=\"input-editing\" type=\"text\" />\n        <div class=\"btn-box btn-box--editing\">\n          <a href=\"javascript:void(0)\" class=\"circle-btn circle-btn--check\" data-action=\"check\">\n            <div class=\"material-icons\">done</div>\n          </a>\n          <a href=\"javascript:void(0)\" class=\"circle-btn circle-btn--cancel\" data-action=\"cancel\">\n            <div class=\"material-icons\">clear</div>\n          </a>\n        </div>\n      </li>\n    `;\n    const inputEl = docFrag.querySelector('input.input-editing');\n    inputEl.value = content;\n    return docFrag.cloneNode(true).querySelector('div').firstElementChild;\n  };\n\n  return {\n    makeTodoItem: (text) => makeTodoItem(text),\n    makeBtnBoxForTodoItem: () => makeBtnBoxForTodoItem(),\n    makeMark: () => makeMark(),\n    makeEditingTodoItem: (content, markColor) => makeEditingTodoItem(content, markColor),\n  };\n})();\n","import _components from './components.js';\nimport _datas from './datas.js';\n\n// TODO@uhjee ::임시.. edit 진입 시, 원본 데이터 카피..개선해야함\nlet originContent = '';\n\n// ! 로직 관련 (이벤트 핸들러)----------------------------------------------------------\nconst _handlers = {\n  /**\n   * todo--body에 todo-item을 추가한다.\n   *\n   * @return  {[type]}     [return description]\n   */\n  addTodo: () => {\n    const inputEl = document.querySelector('#input-todo');\n    if (!inputEl.value || inputEl.value.replaceAll(' ', '').length < 1) {\n      // TODO@heojeehaeng ui로 표현하기\n      alert('내용을 입력해주세요.');\n      inputEl.value = '';\n      inputEl.focus();\n      return;\n    }\n\n    const todoBodyEl = document.querySelector('.todo--body');\n    todoBodyEl.appendChild(_components.makeTodoItem(inputEl.value));\n\n    //  input 초기화\n    inputEl.value = '';\n  },\n  /**\n   * mouseOver 이벤트 핸들러, 수정, 삭제 버튼을 item 내에 표현한다.\n   *\n   * @param   {[type]}  e         [e description]\n   * @param   {[type]}  parentEl  [parentEl description]\n   *\n   * @return  {[type]}            [return description]\n   */\n  showItemBtnBox: (e, parentEl) => {\n    // event delegate Container & 추가될 자기 자신 제외\n    if (\n      [...e.target.classList].includes('todo--body') ||\n      e.target.closest('.btn-box') ||\n      e.target.closest('.todo--body__item.editing')\n    )\n      return; // 구조분해할당을 통한 likeArray => Array\n    const itemEl = e.target.closest('.todo--body__item');\n\n    // 유효성 체크\n    if (!itemEl || [...itemEl.classList].includes('focused')) return;\n    if (!parentEl.contains(itemEl)) return;\n\n    itemEl.addEventListener('mouseleave', () => {\n      if (itemEl.querySelector('.btn-box')) {\n        itemEl.classList.remove('focused');\n        itemEl.querySelector('.btn-box').remove();\n      }\n    });\n    itemEl.classList.add('focused'); // flag 역할\n    itemEl.appendChild(_components.makeBtnBoxForTodoItem());\n  },\n\n  /**\n   * todo-footer의 mark 색상을 선택한다.\n   *\n   * @param   {[type]}  e  [e description]\n   *\n   * @return  {[type]}     [return description]\n   */\n  selectColorMark: (e) => {\n    // TODO@heojeehaeng ::isEmpty로 변경\n    if (![...e.target.classList].includes('selectable')) return;\n    const selectableBtnEl = e.target;\n    const selectColorBoxEl = selectableBtnEl.closest('.select-color-box');\n    const selectColorBtnEl = document.querySelector('.todo--footer .select-color-btn');\n\n    // color 선택\n    if (selectableBtnEl.dataset.action !== 'close') {\n      _datas.setSelectedMarkColor(selectableBtnEl.dataset.color);\n      selectColorBtnEl.innerHTML = _components.makeMark();\n    }\n\n    // close 버튼\n    selectColorBoxEl.classList.remove('show');\n    return;\n  },\n  doBtnBoxAction: (e) => {\n    const circleBtn = e.target.closest('.circle-btn');\n    if (circleBtn) {\n      const action = circleBtn.dataset.action;\n      let todoItemEl = e.target.closest('.todo--body > .todo--body__item');\n      switch (action) {\n        case 'edit':\n          // TODO@uhjee ::edit\n          _handlers.addClass(todoItemEl, 'editing');\n          // btn-box 삭제\n          if (todoItemEl.querySelector('.btn-box')) {\n            todoItemEl.classList.remove('focused');\n            todoItemEl.querySelector('.btn-box').remove();\n          }\n          // content, mark color 가져오기\n          const content = todoItemEl.querySelector('.content').innerText;\n          const markColorClass = [...todoItemEl.querySelector('.mark').classList].find((i) => i.indexOf('--') > 0);\n          const markColor = markColorClass.split('--')[1];\n\n          // 원본 content 저장\n          originContent = content;\n\n          const edtingTodoItemEl = _components.makeEditingTodoItem(content, markColor);\n          const parentEl = todoItemEl.parentNode;\n          // * Node.replaceChild(newChild, oldChild)  --좋아..\n          parentEl.replaceChild(edtingTodoItemEl, todoItemEl);\n          return;\n        case 'delete':\n          // TODO@uhjee ::UI로 바꾸기 (validation과 함꼐)\n          if (confirm('지우시겠어요?')) {\n            console.log(todoItemEl);\n            todoItemEl.remove();\n            // TODO@uhjee ::모든 요소 삭제시, body background에 글씨 \"할일을 적어보세여\"\n          }\n          return;\n        case 'check':\n          const editedContent = todoItemEl.querySelector('input.input-editing').value;\n          const editedTodoItemEl = _components.makeTodoItem(editedContent);\n          todoItemEl.parentNode.replaceChild(editedTodoItemEl, todoItemEl);\n\n          // 원본 데이터 메모리 초기화\n          originContent = '';\n          return;\n        case 'cancel':\n          const originTodoItemEl = _components.makeTodoItem(originContent);\n          // * 사실, content가 아닌 el 자체를 보관해도 될 것 같다.\n          todoItemEl.parentNode.replaceChild(originTodoItemEl, todoItemEl);\n\n          originContent = '';\n          return;\n        default:\n          throw new Error('check  attribute of element dataset.action');\n      }\n    }\n  },\n\n  addClass: (element, className) => {\n    element?.classList.add(className);\n  },\n  removeClass: (element, className) => {\n    element?.classList.remove(className);\n  },\n  delAllEle: function () {\n    var list = document.getElementById('listBody');\n    // parentNode.children :: 모든 자식 노드의 El들을 담고 있는 HTMLCollection을 리턴\n    var listChild = list.children;\n    var listChildLen = listChild.length;\n\n    if (listChild.length == 0) {\n      alert('완료할 목록이 없습니다.');\n      return;\n    }\n\n    for (var index = 0; index < listChildLen; index++) {\n      var tr = document.createElement('tr');\n      var input = document.createElement('input');\n      input.setAttribute('type', 'checkbox');\n      input.setAttribute('class', 'done-btn-chk');\n\n      var td01 = document.createElement('td');\n      td01.appendChild(input);\n      tr.appendChild(td01);\n\n      var td02 = document.createElement('td');\n\n      td02.innerHTML = listChild[0].innerText;\n      tr.appendChild(td02);\n      document.getElementById('done-listBody').appendChild(tr);\n      // 삭제하는 코드\n      list.removeChild(listChild[0]);\n    }\n  },\n  delLastEle: function () {\n    var body = document.getElementById('listBody');\n    var list = document.querySelectorAll('#listBody > tr');\n    var liLen = list.length - 1;\n\n    if (list.length == 0) {\n      alert('완료할 항목이 없습니다.');\n      return false;\n    }\n\n    var tr = document.createElement('tr');\n    var input = document.createElement('input');\n    input.setAttribute('type', 'checkbox');\n    input.setAttribute('class', 'done-btn-chk');\n\n    var td01 = document.createElement('td');\n    td01.appendChild(input);\n    tr.appendChild(td01);\n\n    var td02 = document.createElement('td');\n\n    td02.innerHTML = list[liLen].children[1].innerText;\n    tr.appendChild(td02);\n    document.getElementById('done-listBody').appendChild(tr);\n\n    body.removeChild(list[liLen]);\n  },\n  delSelected: function () {\n    var body = document.getElementById('listBody');\n    var chkbox = document.querySelectorAll('#listBody .btn-chk');\n\n    if (chkbox.length == 0) {\n      alert('완료할 항목이 없습니다.');\n      return;\n    }\n\n    for (var i = 0; i < chkbox.length; i++) {\n      if (chkbox[i].nodeType == 1 && chkbox[i].checked == true) {\n        var tr = document.createElement('tr');\n        var input = document.createElement('input');\n        input.setAttribute('type', 'checkbox');\n        input.setAttribute('class', 'done-btn-chk');\n\n        var td01 = document.createElement('td');\n        td01.appendChild(input);\n        tr.appendChild(td01);\n\n        var td02 = document.createElement('td');\n\n        td02.innerHTML = chkbox[i].parentNode.parentNode.children[1].innerText;\n        tr.appendChild(td02);\n        document.getElementById('done-listBody').appendChild(tr);\n\n        // checkbox의 부모의 부모 == tr El를 삭제해준다.\n        body.removeChild(chkbox[i].parentNode.parentNode);\n      }\n    }\n  },\n};\n\nexport default _handlers;\n","// ! Utilsity Functions\nconst today = new Date();\n\n/**\n * 요일(num)에 따른 약어 요일(String)을 반환한다.\n * @author  uhjee\n * @param   {[type]}  day  숫자형 day(Date.getDay() 반환값)\n *\n * @return  {[type]}       약어 요일(String) e.g. Sun\n */\nexport const getDayString = (day) => {\n  switch (day) {\n    case 0:\n      return 'Sun';\n    case 1:\n      return 'Mon';\n    case 2:\n      return 'Tue';\n    case 3:\n      return 'Wen';\n    case 4:\n      return 'Thu';\n    case 5:\n      return 'Fri';\n    case 6:\n      return 'Sat';\n    default:\n      throw new Error('Not exist the day!');\n  }\n};\n\nexport const getDateWithDayString = () =>\n  `${today.getFullYear()}. ${today.getMonth() + 1}. ${today.getDate()} (${getDayString(today.getDay())})`;\n","import _datas from './components/datas.js';\nimport _components from './components/components.js';\nimport _handlers from './components/handlers.js';\nimport { getDateWithDayString } from './components/utils.js';\n\n// var doneList = {\n//   delAllEle: function () {\n//     var list = document.getElementById('done-listBody');\n//     // parentNode.children :: 모든 자식 노드의 El들을 담고 있는 HTMLCollection을 리턴\n//     var listChild = list.children;\n//     var listChildLen = listChild.length;\n\n//     if (listChild.length == 0) {\n//       alert('완료할 목록이 없습니다.');\n//       return;\n//     }\n\n//     for (let index = 0; index < listChildLen; index++) {\n//       var tr = document.createElement('tr');\n//       var input = document.createElement('input');\n//       input.setAttribute('type', 'checkbox');\n//       input.setAttribute('class', 'btn-chk');\n\n//       var td01 = document.createElement('td');\n//       td01.appendChild(input);\n//       tr.appendChild(td01);\n\n//       var td02 = document.createElement('td');\n\n//       td02.innerHTML = listChild[0].innerText;\n//       tr.appendChild(td02);\n//       document.getElementById('listBody').appendChild(tr);\n//       // 삭제하는 코드\n//       list.removeChild(listChild[0]);\n//     }\n//   },\n//   delLastEle: function () {\n//     var body = document.getElementById('done-listBody');\n//     var list = document.querySelectorAll('#done-listBody > tr');\n//     var liLen = list.length - 1;\n\n//     if (list.length == 0) {\n//       alert('삭제할 항목이 없습니다.');\n//       return false;\n//     }\n\n//     var tr = document.createElement('tr');\n//     var input = document.createElement('input');\n//     input.setAttribute('type', 'checkbox');\n//     input.setAttribute('class', 'btn-chk');\n\n//     var td01 = document.createElement('td');\n//     td01.appendChild(input);\n//     tr.appendChild(td01);\n\n//     var td02 = document.createElement('td');\n\n//     td02.innerHTML = list[liLen].children[1].innerText;\n//     tr.appendChild(td02);\n//     document.getElementById('listBody').appendChild(tr);\n\n//     body.removeChild(list[liLen]);\n//   },\n//   delSelected: function () {\n//     var body = document.getElementById('done-listBody');\n//     var chkbox = document.querySelectorAll('#done-listBody .done-btn-chk');\n\n//     document.querySelectorAll(\"#done-listBody .done-btn-chk[type='checked']\");\n\n//     if (chkbox.length == 0) {\n//       alert('복원할 항목이 없습니다.');\n//       return;\n//     }\n//     for (var i = 0; i < chkbox.length; i++) {\n//       if (chkbox[i].nodeType == 1 && chkbox[i].checked == true) {\n//         var tr = document.createElement('tr');\n//         var input = document.createElement('input');\n//         input.setAttribute('type', 'checkbox');\n//         input.setAttribute('class', 'btn-chk');\n\n//         var td01 = document.createElement('td');\n//         td01.appendChild(input);\n//         tr.appendChild(td01);\n\n//         var td02 = document.createElement('td');\n\n//         td02.innerHTML = chkbox[i].parentNode.parentNode.children[1].innerText;\n//         tr.appendChild(td02);\n//         document.getElementById('listBody').appendChild(tr);\n\n//         // checkbox의 부모의 부모 == tr El를 삭제해준다.\n//         body.removeChild(chkbox[i].parentNode.parentNode);\n//       }\n//     }\n//   },\n// };\n\n// 추가 버튼 이벤트 등록\n// TODO@uhjee :: 추가 DATA BINDING!!!!\n\n// TODO@uhjee :: input-todo validation check\n// document.querySelector('#input-todo').addEventListener('keyup', (e) => {\n//   _datas.setTodoText(e.target.value);\n\n//   console.log(_datas.getTodoText());\n// });\n\ndocument.querySelector('#add-btn').addEventListener('click', _handlers.addTodo);\n\n//  document.querySelector(\"input.text-basic\").addEventListener('keyup', _handlers.addList);\n// // 모두 완료 버튼 이벤트 등록\n// document.getElementById('btnDelAll').addEventListener('click', _handlers.delAllEle);\n// // 마지막 엘레먼트 완료 버튼 이벤트 등록\n// document.getElementById('btnDelLast').addEventListener('click', _handlers.delLastEle);\n// // 선택 완료 버튼 이벤트 등록\n// document.getElementById('DeleteSel').addEventListener('click', _handlers.delSelected);\n\n// // 모두 복원 버튼 이벤트 등록\n// document.getElementById('done-btnDelAll').addEventListener('click', doneList.delAllEle);\n// // 마지막 엘레먼트 복원 버튼 이벤트 등록\n// document.getElementById('done-btnDelLast').addEventListener('click', doneList.delLastEle);\n// // 선택 복원 버튼 이벤트 등록\n// document.getElementById('done-DeleteSel').addEventListener('click', doneList.delSelected);\n\n// ! css 관련 - 추후 js 리팩토링시 통합 ---------------------------------------------------------------------\n\n//  ! HEADER BAR 관련 이벤트\n// saerch 관련 이벤트\nconst searchEl = document.querySelector('.right .search');\nconst searchInputEl = document.querySelector('.right .search input');\n\nsearchEl.addEventListener('click', () => {\n  searchInputEl.focus();\n});\n\nsearchInputEl.addEventListener('focus', () => {\n  searchEl.classList.add('focused');\n  searchInputEl.setAttribute('placeholder', 'Search your memory!');\n});\n\nsearchInputEl.addEventListener('blur', () => {\n  searchEl.classList.remove('focused');\n  searchInputEl.removeAttribute('placeholder');\n});\n\n//  ! TODO CARD 관련 이벤트.\n// * input-todo 관련\nconst inputTodoEl = document.querySelector('#input-todo');\ninputTodoEl.addEventListener('focus', _handlers.addClass(inputTodoEl, 'focused'));\ninputTodoEl.addEventListener('blur', _handlers.removeClass(inputTodoEl, 'focused'));\n\n// 날짜 표현(오늘)\nconst thisYearEl = document.querySelector('.this-year');\n\nthisYearEl.textContent = getDateWithDayString();\n\n// * todo--item: mouseover, btn-box : Event delegattion\n// TODO@heojeehaeng throttle 하게 적용해도 될 듯.. 알아보자\nconst todoBodyEl = document.querySelector('.todo--body');\ntodoBodyEl.addEventListener('mouseover', (e) => _handlers.showItemBtnBox(e, todoBodyEl));\n\n// * click, btn-box\ntodoBodyEl.addEventListener('click', _handlers.doBtnBoxAction);\n\n// * select-color-box 관련\nconst selectColorBtnEl = document.querySelector('.todo--footer .select-color-btn');\nconst selectColorBox = document.querySelector('.select-color-box');\nselectColorBtnEl.addEventListener('click', () => {\n  selectColorBox.classList.add('show');\n});\n\nselectColorBox.addEventListener('click', _handlers.selectColorMark);\n"],"names":["todoText","selectedMarkColor","setSelectedMarkColor","color","getSelectedMarkColor","setTodoText","text","getTodoText","makeTodoItem","docFrag","document","createDocumentFragment","divEl","createElement","appendChild","querySelector","innerHTML","cloneNode","firstElementChild","makeBtnBoxForTodoItem","makeMark","makeEditingTodoItem","content","markColor","value","$f1f96401ab13104d8e4ed2af949a5431$var$originContent","$f1f96401ab13104d8e4ed2af949a5431$export$default","addTodo","inputEl","replaceAll","length","alert","focus","showItemBtnBox","e","parentEl","target","classList","includes","closest","itemEl","contains","addEventListener","remove","add","selectColorMark","selectableBtnEl","selectColorBoxEl","selectColorBtnEl","dataset","action","doBtnBoxAction","circleBtn","todoItemEl","addClass","innerText","markColorClass","find","i","indexOf","split","edtingTodoItemEl","parentNode","replaceChild","confirm","console","log","editedContent","editedTodoItemEl","originTodoItemEl","Error","element","className","removeClass","delAllEle","list","getElementById","listChild","children","listChildLen","index","tr","input","setAttribute","td01","td02","removeChild","delLastEle","body","querySelectorAll","liLen","delSelected","chkbox","nodeType","checked","$f7822e464b67a2dca567a689dd460b93$var$today","Date","$c788a6f1a6f253db59764723f365e08f$var$searchEl","$c788a6f1a6f253db59764723f365e08f$var$searchInputEl","removeAttribute","$c788a6f1a6f253db59764723f365e08f$var$inputTodoEl","textContent","getFullYear","getMonth","getDate","day","$f7822e464b67a2dca567a689dd460b93$export$getDayString","getDay","$c788a6f1a6f253db59764723f365e08f$var$todoBodyEl","$c788a6f1a6f253db59764723f365e08f$var$selectColorBtnEl","$c788a6f1a6f253db59764723f365e08f$var$selectColorBox"],"version":3,"file":"index.487abc14.js.map"}